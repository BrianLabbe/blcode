{
	var TagType = {
		OpenTag : "openTag",
		CloseTag : "closeTag"
	}

	var Tag = function(name, type, attributes) {
		this.name = name;
		this.type = type;
		this.attributes = attributes;
	}

	var Attribute = function(name, value) {
		this.name = name;
		this.value = value;
	}

	function makeOpenCloseTagElement(name, attributes, elements) {
		result = [];
		result = result.concat(new Tag(name, TagType.OpenTag, attributes));
		result = result.concat.apply(result, elements);
		result = result.concat(new Tag(name, TagType.CloseTag, []));

		return result;
	}

	function makeLeafOpenCloseTagElement(name, attributes, value) {
		var leafTag = new Tag(name, TagType.OpenTag, attributes);
		leafTag.value = value;
		result = [];
		result = result.concat(leafTag);

		return result;
	}
}

Document
 =	elements:Element* {return [].concat.apply([], elements);}

Element
 =	OpenCloseTagElement
 /	StandaloneTagElement
 /	TextElement
 /	LeafOpenCloseTagElement

OpenCloseTagElement "Open Close Element"
 =	"[" openName:OpenCloseTagName attributes:AttributeList "]" elements:Element* "[/" closeName:OpenCloseTagName "]" { 
 		if (openName != closeName) {
 			throw new Error("Expecting [/" + openName + "] but got [/" + closeName + "]");
 		}

 		return makeOpenCloseTagElement(openName, attributes, elements);
 	}

StandaloneTagElement "Standalone Element"
 =	"[" name:StandaloneTagName attributes:AttributeList "]" {
 		return [new Tag(name, TagType.OpenTag, attributes)];
 	}

LeafOpenCloseTagElement "Leaf Open Close Element"
 =	"[" openName:LeafOpenCloseTagName attributes:AttributeList "]" characters:TextCharacter* "[/" closeName:LeafOpenCloseTagName "]" { 
 		if (openName != closeName) {
 			throw new Error("Expecting [/" + openName + "] but got [/" + closeName + "]");
 		}

 		return makeLeafOpenCloseTagElement(openName, attributes, characters.join(""));
 	}

TextElement
 =	characters:TextCharacter+ {return [characters.join("")]}

AttributeList
 =	attributes:Attribute*

Attribute
 =	" "* name:AttributeName " "* "=" " "* "\"" value:AttributeValue "\"" " "* {
 		return new Attribute(name, value);
 	}
 OpenCloseTagName 
 = "b"
 / "bold"
 / "i"
 / "italics"
 / "u"
 / "underline"
StandaloneTagName 
 = "img"
 / "image"
LeafOpenCloseTagName 
 = "code"

AttributeName
 =	characters:AttributeNameCharacter+ {return characters.join("")}

AttributeValue
 =	characters:AttributeValueCharacter+ {return characters.join("")}

TextCharacter "text character"
 =  char:[\x21-\x3B\x3D\x3F-\x5A\0x5C\x5E-\u10FFFF] 
 /  EscapedCharacter
 /	SpecialCharacter
 /  WhitespaceCharacter

EscapedCharacter 
 =  "\\[" { return "[" }
 /  "\\]" { return "]" }
 /	"\\\\" { return "\\"}
 
SpecialCharacter
 =	"<" { return "&lt;" }
 /	">" { return "&gt;" }

WhitespaceCharacter
 =	" "
 /	"\t"
 /	"\n" { return "<br />"}
 /	"\r" { return ""}

AttributeValueCharacter
 =	[\x20-\x21\x23-\x5B\x5D-\u10FFFF]

AttributeNameCharacter
 =	[a-zA-Z0-9]
 